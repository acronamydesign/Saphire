var fs = require('fs'),
		parseRegions = require('./regions.js'),
		saphireApi = require('saphire').functions

module.exports = function(setTheme, path, getTheme, entryPoint){

		//make the theme structure and entry file
		var themesDir = path+"themes",
				getTheme = getTheme.toLowerCase(),
				searchEntry = new RegExp(entryPoint);

		//if themes isnt deployed make it
		if (!fs.existsSync(themesDir)) {
			fs.mkdirSync(themesDir);
			fs.mkdirSync(themesDir+"/"+getTheme);
			fs.writeFile(themesDir+"/"+getTheme+"/" + getTheme+entryPoint, "//foo")
		}

		var themeList = fs.readdirSync(themesDir)

		//recognise theme if has entry point file as specified in index
		var allowedThemes = []

		for(theme in themeList){
			var lookEntryPoint = fs.readdirSync(themesDir+"/"+themeList[theme]).toString()
			var currentDir = themesDir+"/"+themeList[theme];
			if(searchEntry.test(lookEntryPoint)){
				allowedThemes.push(themeList[theme])
			}
		}

		function themePackageJson(path) {
				try {
					//needs to have been init and entry point js file is present
					return require.resolve(path)
				} catch (e) {
					return false
				}
			}

		for(theme in allowedThemes){
			//check if package json
			if(themePackageJson(themesDir+"/"+allowedThemes[theme])){
				var meta = require(themesDir+"/"+allowedThemes[theme]+"/"+"package.json")
			}
			else{
				var meta = {
					version:"No version specified",
					author:"No Author specified",
					license:"No license provided",
					description:"No description provided",
					help:"Please use 'npm init' inside your theme to add extra details such as Your name, licencing information and what this theme is all about"
				}
			}
			//ACTIVE THEME
			if(allowedThemes[theme] == getTheme){
				var state = "active"
			}
			else{
				var state = "disabled"
			}
			//pass the information to saphire data array
			var machineName = allowedThemes[theme].replace(/\s/g,"_").replace(/-/g,"_");
			saphireApi.extend("themes",machineName,{
				freindlyName:allowedThemes[theme].replace(/_/g," "),
				description:meta.description,
				path:themesDir+"/"+allowedThemes[theme],
				version:meta.version,
				author:meta.author,
				license:meta.license,
				help:meta.help,
				state:state
			});
		}
	return currentTheme = themesDir+"/"+getTheme;

}
