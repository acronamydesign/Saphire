var fs = require('fs'),
		parseRegions = require('./regions.js'),
		saphireData = require("saphire").data,
		saphireApi = require('saphire').functions

module.exports = function(path, getTheme, entryPoint){

		//make the theme structure and entry file
		var themesDir = path+"themes",
				getTheme = getTheme.toLowerCase(),
				searchEntry = new RegExp(entryPoint);

		//if themes isnt deployed make it
		if (!fs.existsSync(themesDir)) {
			fs.mkdirSync(themesDir);
			fs.mkdirSync(themesDir+"/"+getTheme);
			fs.writeFile(themesDir+"/"+getTheme+"/" + getTheme+entryPoint, "//foo")
		}

		var themeList = fs.readdirSync(themesDir)

		//recognise theme if has entry point file as specified in index
		var allowedThemes = []

		for(theme in themeList){
			var lookEntryPoint = fs.readdirSync(themesDir+"/"+themeList[theme]).toString()
			var currentDir = themesDir+"/"+themeList[theme];
			if(searchEntry.test(lookEntryPoint)){
				allowedThemes.push(themeList[theme])
			}
		}

		function themePackageJson(path) {
				try {
					//needs to have been init and entry point js file is present
					return require.resolve(path)
				} catch (e) {
					return false
				}
			}

	var themeInfo = []
	for(theme in allowedThemes){
		var resolveJson = themePackageJson(themesDir+"/"+allowedThemes[theme]+"/"+"package.json")

		//IF JSON else carry on
		if(resolveJson){
			//successfull resolution of theme with json package, it is not discounted from allowed themes however.
			packageJson = require(resolveJson)
			//build data from this
			themeInfo[theme] = {
				freindlyName:allowedThemes[theme].replace(/_/g," "),
				description:packageJson.description,
				path:themesDir+"/"+allowedThemes[theme],
				version:packageJson.version,
				author:packageJson.author,
				license:packageJson.license
			}

		}
		else{
			themeInfo[theme] = {
				freindlyName:allowedThemes[theme].replace(/_/g," "),
				description:"",
				path:themesDir+"/"+allowedThemes[theme],
				version:"",
				author:"",
				license:"",
				help:"Please run npm init inside this theme to provide further information."
			}
		}

		var machineName = allowedThemes[theme].replace(/\s/g,"_").replace(/-/g,"_");



		//all themes get this array assignment
		saphireData["activeThemes"][machineName] = themeInfo[theme]
	}

	var activeMachineName = getTheme.replace(/\s/g,"_").replace(/-/g,"_");
	//activate theme

	var activeThemes = saphireData["activeThemes"][activeMachineName]

	return activeMachineName;
}
