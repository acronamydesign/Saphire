var fs = require("fs"),
		jade = require("jade"),
		exportable = [],
		saphireData = require("saphire").data

var setTheme = saphireData.activeThemes[0].app,
		entryPoint = entryPoint = saphireData.activeThemes[2].entry

//GOALS: generate a theme list, make it valid if info file is presen, create system core templates and the overide if templates exist in theme.
//loop all of this back.
var saphireThemes = {

	use: function(publicPath, app) {
		this.app = app;
		this.path = publicPath // add to this object scope
		return this.deployTheme() //run the next function
	},
	deployTheme:function(){
		var deployTheme = require("./actions/deploy-theme.js")
		this.theme = deployTheme(setTheme, this.path, setTheme, entryPoint)
		//initialize
		return this.init()
	},
	init: function(){
		//important stuff
		var saphireApi = require("saphire")

		var app = this.app,
				currentTheme = this.theme

			//set new views dir to system templates
			app.set("views",__dirname+"/system");

		var indexTheme = require("./actions/theme-index.js");
		//all files in active theme
		var files = indexTheme(currentTheme)

		//get a list of system templates
		var systemTemplates = require("./actions/templates-system.js")
		var systemPathDetail = systemTemplates();

		//get a list of theme templates
		var themeTemplates = require("./actions/templates-theme.js")
		var pathDetail = themeTemplates(files)

		//splice the rendered system list with theme templates instead
		var overideTemplates = require("./actions/templates-overide.js")
		var overideTemplates = overideTemplates(pathDetail, systemPathDetail)

		//make the returned markup ready to compile
		var markup = overideTemplates,
				head = markup.head,
				body = markup.body

		//make the compile funtion
		var compile = function(obj){
			//the compiled body in either location gets data injected here instead of directly into the routes, stuff like the render function will come in here.
			return "<html lang='FROM DB'>"+head()+body(obj)+"</html>"
		}

		//apend some usefull data to the saphire data object to be used all over the place
		//send it back up the function chain ^^^
		return compile;
	}

}

module.exports = saphireThemes
