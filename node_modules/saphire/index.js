//Master file
//This file is manditory but is not a core module, instead it allows for teamwork between other saphire modules.
var saphireGlobals = require("./globals.js"),
		errors = require("./errors/errors.json"),
		loadMainPackageJSON = require("./models/main-package.js"),
		utils = require("./models/utils.js"),
		buildAdminMenu = require("./conditional/build-admin-menu.js"),
		buildSaphireRegistry = require("./models/build-registry.js"),
		core = require("./models/check-cores.js"),
		saphireRegions = require('saphire-regions'),
		mongoose = require("mongoose"),
		saphireThemes = require('saphire-themes'),
		exportable = {};

//build the saphire registry to run multipurpose code if apropriate, use check cores function.
var saphireRegistry = buildSaphireRegistry(loadMainPackageJSON())

//TODO, work out how to handle install and mongodb


var saphire = {}

saphire.use = function(entry){
	return saphireRegions.use(entry);
	return saphireThemes.use(entry);
}
saphire.render = function(str){
	render = saphireRegions.render.bind(saphireRegions);
	return render(str)
}

saphire["settings"] = []
saphire.set = function(key,val){
	return saphire['settings'][key] = val;
}

saphire.db = function (type) {
	//specify mongo or default to mongo, plan to add other database profiles
	if(type == "mongodb" || type == undefined) {
		var db = saphire.settings.db;
		var start = 'mongodb://' + db.host + ':' + db.port + '/' + db.database;
		if (db.username || db.user) {
			var user = db.username || db.user;
		}
		if (db.password || db.pass) {
			var pass = db.password || db.pass;
		}
		mongoose.connect(start, {
			user: user,
			pass: pass
		});
	}
	else{
		console.log("no connection made, "+type+" is not yet supported")
	}
}
saphire.public = function(){
	var public = saphire.settings.public;
	return public;
}

//PROFILE - for standalone functionality


if(core("regions") && core("admin")){
	var buildAdminMenu = buildAdminMenu.bind(exportable)
	buildAdminMenu(saphireRegistry)
}

//prepare conditional exports
exportable["functions"] = saphire;
exportable["data"] = data;
module.exports = exportable;
