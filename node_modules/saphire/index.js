//Master file
var saphireGlobals = require("./globals.js"),
	express = require("express"),
	errors = require("./errors/errors.json"),
	loadMainPackageJSON = require("./actions/main-package.js"),
	buildSaphireRegistry = require("./actions/build-registry.js"),
	core = require("./actions/check-cores.js"),
	//EXPORTS
	exportable = {};

//build the saphire registry to run multipurpose code if apropriate, use check cores function.
var saphireRegistry = buildSaphireRegistry()

//API
var saphire = {},
saphireApi = require("./api/index.js")
saphire.data = saphireApi.data;
saphire.extend = saphireApi.extend;
saphire.local = saphireApi.local;
saphire.requireAll = saphireApi.requireAll;
saphire.requireModels = saphireApi.requireModels;
saphire.gate = saphireApi.gate;
saphire.queryGate = saphireApi.queryGate;
saphire.machineName = saphireApi.machineName;
saphire.template = {} //Group
saphire.template.inject = saphireApi.injectMarkup;
saphire.template.htmlEl = saphireApi.htmlEl;
saphire.db = saphireApi.db;
saphire.bodyParser = saphireApi.bodyParser;
saphire.moduleExists = saphireApi.moduleExists;


//DEFINE ACTIVE THEMES
saphire.extend("activeThemes", "app", "Saphire");
saphire.extend("activeThemes", "admin", "admin-theme");
saphire.extend("activeThemes", "entry", ".settings.js");

//MODELS
var models = saphire.requireModels(__dirname+"/models",".js").models;
var modelKeys = saphire.requireModels(__dirname+"/models",".js").keys;
for(model in models){
	saphire.extend("models",modelKeys[model],models[model][modelKeys[model]])
}

//START APP
saphire.start = function (app) {
	//get the public path and save for later
	saphire.extend("publicPath","temp", app.settings.views)

	if (core("saphire-plugins")) {
		plugins = require("saphire-plugins");
		for (plugin in plugins) {
			targetPlug = plugins[plugin];
			enState = targetPlug["status"];
			plugPath = targetPlug["path"];
			//if enabled, its unlikely that this will be enabled by default.
			if (enState = 1) {
				var enabledPlugin = []
				require(plugPath)
			}
		}
	}

	//installer pass app if installer is available.
	if (core("saphire-admin") && core("saphire-installer")) {
		var installer = require(saphire.moduleExists("saphire-installer"))
		installer[0].install(app, saphire.db, bodyParser)
	}

	//Regions creates a themes directory and info file, it should be used with themes to make the most of the system.
	if (core("saphire-regions")) {
		//regions get
		var saphireRegions = require(saphire.moduleExists('saphire-regions'));

		//Main Theme
		var mainTheme = saphireRegions.use(app.settings.views, app, saphire.data.activeThemes[0].app)
		var adminTheme = saphireRegions.use(app.settings.views, app, saphire.data.activeThemes[1].admin)

		function selectTheme(themeName){
			this.render = function(regionName){
				var region$ = themeName[regionName];
				return "<"+region$["wrapper"]+" class='"+region$["class"]+" "+region$["data"]+"'>"+region$["blocks"]+"</"+region$["wrapper"]+">"
			}
		}

		adminTheme = new selectTheme(adminTheme)
		mainTheme = new selectTheme(mainTheme)

	}

	//THEMES MUST COME AFTER REGIONS this is because it: app.set("views", system templates), theme templates dont actually render
	if (core("saphire-themes")) {
		//regions get
		saphireThemes = require(saphire.moduleExists('saphire-themes'));

		//main theme compiler

		app.get("/", function (req, res) {
			var mainThemeMarkup = saphireThemes.use(app, saphire.data.activeThemes[0].app)
			res.render("index.jade", {
				compile:saphireThemes.compile(mainThemeMarkup, {
					head:{
						headtest:"something else"
					},
					body:{
						render:mainTheme.render
					}
				}),//this object could be extended
			});
		});

	}

	if (core("saphire-admin")) {
		saphireAdmin = require(saphire.moduleExists("saphire-admin"));
		var admin = express(); // the sub app
		app.use('/admin', admin); //route of admin

		var adminRoutes = saphireAdmin.entry(admin, {
			saphire_themes: saphire.data.themes,
			saphire_regions: "Region data",
			saphire_plugins: "all sorts of plugins",
			saphire_status: "all sorts of info"
		})

		admin.set("views",saphireThemes.systemPath())

		function route() {
			this.dynamic = function(obj){
				return app.get(admin.mountpath+obj.url , function(req,res){

					var adminThemeMarkup = saphireThemes.use(app, saphire.data.activeThemes[1].admin)

					res.render("index.jade",{
						compile:saphireThemes.compile(adminThemeMarkup,{
							head:{
								headtest:"something else"

							},
							body:{
								render:adminTheme.render,
								page:obj.page,
								system:{
									machineName:obj.system,
									version:obj.version,
									description:obj.description
								},
								common:obj.common,
								purpose:obj.purpose
							}
						}),
					})

				});
			}

		}
		route = new route(); //NEEDS TO BE NEW IN FOR LOOP

		for (purpose in adminRoutes) {

			route.dynamic({
				url:adminRoutes[purpose]["routes"]["url"],
				page:adminRoutes[purpose]["template"],
				purpose:adminRoutes[purpose]["purpose"],
				common:adminRoutes[purpose]["common"],
				system:adminRoutes[purpose]["machineName"],
				version:adminRoutes[purpose]["version"],
				description:adminRoutes[purpose]["description"]
			})

		}

		admin.get('/', function (req, res) {
			res.redirect(admin.mountpath + '/dashboard');
		})
	}

	//install done redirect
	app.get("/done", function (req, res) {
		res.redirect("/")
	});
}

//connect to mongoose
saphire.db.connect()

//prepare exports
exportable["functions"] = saphire;
exportable["errors"] = errors;
exportable["cores"] = saphireRegistry;
exportable["data"] = saphire.data;

module.exports = exportable;
