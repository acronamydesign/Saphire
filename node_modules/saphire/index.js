//Master file
//This file is manditory but is not a core module, instead it allows for teamwork between other saphire modules.
var saphireGlobals = require("./globals.js"),
	express = require("express"),
	api = require("./api/api.js"),
	errors = require("./errors/errors.json"),
	databaseConf = require("./database.json"),
	loadMainPackageJSON = require("./actions/main-package.js"),
	buildSaphireRegistry = require("./actions/build-registry.js"),
	core = require("./actions/check-cores.js"),
	mongoose = require("mongoose"),
	colors = require("colors"),
	bodyParser = require("body-parser"),
	//EXPORTS
	exportable = {},
	//MAIN
	saphire = {},
	data = {},
	frontRoutesData = {};


saphire.data = {};
//STICK THIS IN ARRAY
function extend(nameSpace, key, value) {
	//make the object to push
	var obj = {}
	obj[key] = value;
	//select an existing array or extend it.
	this[nameSpace] && this[nameSpace].push(obj) || (this[nameSpace] = [obj]);
	return this;
}
var extend = extend.bind(saphire.data)
saphire.extend = extend;

//build the saphire registry to run multipurpose code if apropriate, use check cores function.
var saphireRegistry = buildSaphireRegistry()

//DEFINE ACTIVE THEMES
saphire.extend("activeThemes", "app", "Saphire")
saphire.extend("activeThemes", "admin", "admin-theme")
saphire.extend("activeThemes", "entry", ".settings.js")

saphire.db = {
	toSaphire: "mongodb://" + databaseConf.host + ":" + databaseConf.port + "/" + databaseConf.database,
	mongoose: mongoose,
	get connectApp() {
		return this.mongoose.connect(this.toSaphire)
	},
	get open() {
		return this.connectApp.connection
	},
	connect: function () {
		var db = this.open;
		db.on('error', function (err) {
			console.log('connection error'.red, err);
		});
		db.once('open', function () {
			console.log('connected to mongoose.'.green);
		});
		return db;
	}
}

saphire.bodyParser = function () {
	return bodyParser;
}


//THE PROPER WAY TO DO EXISTANCE must be after all logic
function module_exists(name) {
	try {
		return require.resolve(name);
	} catch (e) {
		return false
	}
}

//always last
//START APP

saphire.start = function (app) {
	//get the public path and save for later
	saphire.extend("publicPath","temp", app.settings.views)

	if (core("saphire-plugins")) {
		plugins = require("saphire-plugins");
		for (plugin in plugins) {
			targetPlug = plugins[plugin];
			enState = targetPlug["status"];
			plugPath = targetPlug["path"];
			//if enabled, its unlikely that this will be enabled by default.
			if (enState = 1) {
				var enabledPlugin = []
				require(plugPath)
			}
		}
	}

	//installer pass app if installer is available.
	if (core("saphire-admin") && core("saphire-installer")) {
		var installer = require(module_exists("saphire-installer"))
		installer[0].install(app, saphire.db, bodyParser)
	}

	//Regions creates a themes directory and info file, it should be used with themes to make the most of the system.
	if (core("saphire-regions")) {
		//regions get
		var saphireRegions = require(module_exists('saphire-regions'));

		//Main Theme
		var mainTheme = saphireRegions.use(app.settings.views, app, saphire.data.activeThemes[0].app)
		var adminTheme = saphireRegions.use(app.settings.views, app, saphire.data.activeThemes[1].admin)

		function selectTheme(themeName){
			this.render = function(regionName){
				var region$ = themeName[regionName];
				return "<"+region$["wrapper"]+" class='"+region$["class"]+" "+region$["data"]+"'>"+region$["blocks"]+"</"+region$["wrapper"]+">"
			}
		}

		adminTheme = new selectTheme(adminTheme)
		mainTheme = new selectTheme(mainTheme)

	}

	//THEMES MUST COME AFTER REGIONS this is because it: app.set("views", system templates), theme templates dont actually render
	if (core("saphire-themes")) {
		//regions get
		saphireThemes = require(module_exists('saphire-themes'));

		//main theme compiler

		app.get("/", function (req, res) {
			var mainThemeMarkup = saphireThemes.use(app, saphire.data.activeThemes[0].app)
			res.render("index.jade", {
				compile:saphireThemes.compile(mainThemeMarkup, {
					head:{
						headtest:"something else"
					},
					body:{
						render:mainTheme.render
					}
				}),//this object could be extended
			});
		});

	}

	if (core("saphire-admin")) {
		saphireAdmin = require(module_exists("saphire-admin"));
		var admin = express(); // the sub app
		app.use('/admin', admin); //route of admin

		var adminRoutes = saphireAdmin.entry(admin, {
			saphire_themes: saphire.data.themes,
			saphire_regions: "Region data",
			saphire_plugins: "all sorts of plugins",
			saphire_status: "all sorts of info"
		})

		//SORT THIS OUT
/*
		function route() {
			this.unique = function (app, url, renderPath, data, renderProfile) {
				return app.get(url, function (req, res) {
					res.render(renderPath, {

						data: data,
						render:renderProfile

					});
					console.log(data)
				});
			}
		}
		route = new route(); //NEEDS TO BE NEW IN FOR LOOP

		for (purpose in adminRoutes) {

			route.unique(admin, adminRoutes[purpose]["routes"]["url"], app.settings.views + "/admin-index.jade", adminRoutes[purpose], adminTheme.render)

		}*/

		admin.set("views",saphireThemes.systemPath())
		admin.get("/", function (req, res) {

			//get theme templates at runtime
			var adminThemeMarkup = saphireThemes.use(app, saphire.data.activeThemes[1].admin)

			res.render("index.jade", {
				compile:saphireThemes.compile(adminThemeMarkup, {
					head:{
						headtest:"something else"
					},
					body:{
						render:adminTheme.render
					}
				}),//this object could be extended
			});
		});
/*
		admin.get('/', function (req, res) {
			res.redirect(admin.mountpath + '/dashboard');
		})*/
	}

	//!important
	//the compiled body is required in, and so the templates expect data in the front markup function.

	//install done redirect
	app.get("/done", function (req, res) {
		res.redirect("/")
	});
}


//prepare exports
exportable["functions"] = saphire;
exportable["errors"] = errors;
exportable["cores"] = saphireRegistry;
exportable["data"] = saphire.data;



module.exports = exportable;
