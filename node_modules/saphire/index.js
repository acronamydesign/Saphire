//Master file
//This file is manditory but is not a core module, instead it allows for teamwork between other saphire modules.
var saphireGlobals = require("./globals.js"),
		errors = require("./errors/errors.json"),
		databaseConf = require("./database.json"),
		loadMainPackageJSON = require("./models/main-package.js"),
		utils = require("./models/utils.js"),
		buildAdminMenu = require("./conditional/build-admin-menu.js"),
		buildSaphireRegistry = require("./models/build-registry.js"),
		core = require("./models/check-cores.js"),
		mongoose = require("mongoose"),
		colors = require("colors"),
		saphireThemes = require('saphire-themes'),
		bodyParser = require("body-parser"),
		exportable = {};




//build the saphire registry to run multipurpose code if apropriate, use check cores function.
var saphireRegistry = buildSaphireRegistry(loadMainPackageJSON())

//TODO, work out how to handle install and mongodb

var saphire = {}
saphire["settings"] = []

saphire.set = function(key,val){
	return saphire['settings'][key] = val;
}

saphire.public = function(){
	var public = saphire.settings.public;
	return public;
}

saphire.db = {
	toSaphire:"mongodb://"+databaseConf.host+":"+databaseConf.port+"/"+databaseConf.database,
	mongoose:mongoose
}

saphire.bodyParser = function(){
	return bodyParser;
}


//THE PROPER WAY TO DO EXISTANCE must be after all logic
function module_exists( name ) {
	try {
		return require.resolve( name );
	}
	catch( e ) {
		return false
	}
}


//always last
saphire.start = function (app) {

	//installer pass app if installer is available.
	if (core("saphire-admin") && core("saphire-installer")) {
		var installer = require(module_exists("saphire-installer"))
		installer[0].install(app, saphire.db, bodyParser)
	}

	if(core("saphire-regions")){
		//regions get
		saphireRegions = require(module_exists('saphire-regions'));
		saphireRegions.use(app.settings.views, app);
	}

	saphireThemes.use(app.settings.views);


}


//PROFILE - for standalone functionality
//
//

if(core("saphire-regions") && core("saphire-admin")){
	var buildAdminMenu = buildAdminMenu.bind(exportable)
	buildAdminMenu(saphireRegistry)
}
if(core("saphire-regions")){

	saphire.render = function(str){
		render = saphireRegions.render.bind(saphireRegions);
		return render(str)
	}

}
if(core("saphire-plugins")){
	plugins = require("saphire-plugins");
	for(plugin in plugins){
		targetPlug = plugins[plugin];
		enState = targetPlug["status"];
		plugPath = targetPlug["path"];
		//if enabled, its unlikely that this will be enabled by default.
		if(enState = 1){
			var enabledPlugin = []
			require(plugPath)
		}
	}
}
if(core("saphire-plugins") && core("saphire-admin")){

}

//prepare conditional exports
exportable["functions"] = saphire;
exportable["data"] = data;
exportable["errors"] = errors;

module.exports = exportable;
