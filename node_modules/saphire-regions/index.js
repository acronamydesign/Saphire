var parseRegions = require('./actions/regions.js'),
		fs = require("fs"),
		saphireData = require("saphire").data

var exportable = [];

var setTheme = saphireData.activeThemes[0].app,
		adminTheme = saphireData.activeThemes[1].admin,
		entryPoint = saphireData.activeThemes[2].entry


//loop entire function chain back to source so that we can parse as many themes as we like.
//using psudo class working patern as is aplicable here

function saphireRegions(){ //class
	this.use = function(publicPath, app, themeSwitch) {
		this.app = app;
		this.mode = themeSwitch;
		this.path = publicPath // add to this object scope
		return this.deployTheme() //run the next function
	}

	this.deployTheme = function(){
		var setTheme = this.mode;

		var getTheme = setTheme.toLowerCase()

		//make the theme structure and info file
		var themesDir = this.path+"themes";

		//if themes isnt deployed make it
		if (!fs.existsSync(themesDir)) {
			fs.mkdirSync(themesDir);
			fs.mkdirSync(themesDir+"/"+getTheme);
			fs.writeFile(themesDir+"/"+getTheme+"/" + getTheme+entryPoint, "//foo")
		}

		var themeList = fs.readdirSync(themesDir)

		//recognise theme if has entry point file as specified at the top
		var allowedThemes = []

		for(theme in themeList){
			var lookEntryPoint = fs.readdirSync(themesDir+"/"+themeList[theme]).toString()
			var currentDir = themesDir+"/"+themeList[theme];
			if(/.info.js/g.test(lookEntryPoint)){
				allowedThemes.push(themesDir+"/"+themeList[theme])
			}
		}

		var currentTheme = themesDir+"/"+getTheme;
		this["theme"] = currentTheme;

		//get active theme and check if has info file based on the already allowed themes, if not throw err
		if(allowedThemes.indexOf(currentTheme)){
			//acitve this is not broken
			var availableRegions = parseRegions(themesDir+"/"+getTheme+"/"+getTheme+entryPoint, this.mode);
			return availableRegions;
		}
		else{
			console.log("no "+entryPoint+" file found in "+getTheme)
		}
		// start sending the render function back up the function chain to the main module.
	}

}
saphireRegions = new saphireRegions();

module.exports = saphireRegions

