var map = require('./src.map.js'),
		initialSetup = require('./models/theme-setup.js'),
		allThemes = require('./models/index-theme.js'),
		parseRegions = require('./models/regions.js'),
		render = require('./jade-helpers/func-render.js'),
		fs = require("fs"),
		recursive = require("recursive-readdir-sync"),
		jade = require("jade"),
		saphireExpose = {
			functions:require("saphire"),
			errors:require("saphire")
		};


var exportable = [];

var setTheme = "Saphire",
		entryPoint = ".info.js"


//this is a bit of a loop really it returns back to source :/
var saphire = {

	use: function(publicPath, app) {
		this.app = app;
		this.path = publicPath // add to this object scope
		return this.deployTheme() //run the next function
	},
	deployTheme:function(){

		var getTheme = setTheme.toLowerCase()

		//make the theme structure and info file
		var themesDir = this.path+"themes";

		//if themes isnt deployed make it
		if (!fs.existsSync(themesDir)) {
			fs.mkdirSync(themesDir);
			fs.mkdirSync(themesDir+"/"+getTheme);
			fs.writeFile(themesDir+"/"+getTheme+"/" + getTheme+entryPoint, "//foo")
		}

		var themeList = fs.readdirSync(themesDir)

		//recognise theme if has entry point file as specified at the top
		var allowedThemes = []

		for(theme in themeList){
			var lookEntryPoint = fs.readdirSync(themesDir+"/"+themeList[theme]).toString()
			var currentDir = themesDir+"/"+themeList[theme];
			if(/.info.js/g.test(lookEntryPoint)){
				allowedThemes.push(themesDir+"/"+themeList[theme])
			}
		}
		//TO DO PUSH ALLOWED THEMES TO DB

		var currentTheme = themesDir+"/"+getTheme;
		this["theme"] = currentTheme;

		//get active theme and check if has info file based on the already allowed themes, if not throw err
		if(allowedThemes.indexOf(currentTheme)){
			//acitve this is not broken
			var availableRegions = parseRegions(themesDir+"/"+getTheme+"/"+getTheme+entryPoint);
			this.regionData = availableRegions;
		}
		else{
			console.log("no .info.js file found in "+getTheme)
		}
		//initialize
		this.init()
	},

	render:function(str){
		var region = this["regionData"][str];
		return "<"+region['wrapper']+" class='"+region['class']+"' "+region['dataFormatted']+">"+region['blocks']+"</"+region['wrapper']+">"
	},
	init: function(){
		//important stuff
		var app = this["app"],
				currentTheme = this.theme,
				ignoreList = ['*.css','*.js','*.json','*.txt','*.md','*.styl','*.scss','*.less','*.ejs','*.html','*.htm'];

		//set new views dir to system templates
		app.set("views",__dirname+"/system");


		//MODULE THIS


		//look into theme and find all files
		try {
			files = recursive(currentTheme);
		} catch (err) {
			if (err.errno === 34) {
				console.log('theme does not exist');
			} else {
				console.log("Something broke, :(")
				throw err;
			}
		}
		//now look into system
		var systemTemplates = fs.readdirSync(__dirname+"/system/templates");

		console.log("System")
		var systemPathDetail = []
		for(template in systemTemplates){
			systemPathDetail[template] = {name:systemTemplates[template],path:__dirname+"/system/templates/"+systemTemplates[template]}
		}

		//THEME PATH DETAIL
		var pathDetail = []
		for (file in files) {
			var themeFiles = files[file].split("/").pop();
			pathDetail[file] = themeFiles
			pathDetail[file] = [themeFiles,files[file]]

			//ignore list
			if(/.js/g.test(pathDetail[file][0]) || /.css/g.test(pathDetail[file][0]) || /.txt/g.test(pathDetail[file][0]) || /.md/g.test(pathDetail[file][0])){
				var matchIndex = pathDetail[file].indexOf(pathDetail[file][0]);
				delete pathDetail[file]
			}
			//cleen up time
			var pathDetail = pathDetail.filter(Boolean);
		}

		//compare the theme content array and system templates object
		for(item in systemPathDetail){
			var compairKey = systemPathDetail[item];
			for(item in pathDetail){
				//theme dir files should replace system object values
				var themeJadeFilename = pathDetail[item][0]
				if(compairKey["name"] == themeJadeFilename){
					compairKey["path"] = pathDetail[item][1]//give the new path from the theme to the system.
				}
			}
		}


		//search the current theme for overides

		//assign purposes
		//if region, if page, if page-type, if html
		for(template in systemPathDetail){
			if(/html/g.test(systemPathDetail[template]["name"])){
				systemPathDetail[template]["type"] = "html"
				systemPathDetail[template]["context"] = "default"
			}
			else if(/page/g.test(systemPathDetail[template]["name"])){
				systemPathDetail[template]["type"] = "page"
				systemPathDetail[template]["context"] = "default"
			}
			else if(/region/g.test(systemPathDetail[template]["name"])){
				systemPathDetail[template]["type"] = "region"
				systemPathDetail[template]["context"] = "default"
			}
			else if(/category/g.test(systemPathDetail[template]["name"])){
				systemPathDetail[template]["type"] = "category"
				systemPathDetail[template]["context"] = "default"
			}
		}

		//new overides
		console.log(systemPathDetail)

		//assign to compile
		for(template in systemPathDetail){
			if(systemPathDetail[template]["context"] == "default"){
				//DEFAULT behavior no BEM file names
				if(systemPathDetail[template]["type"] == "html"){
					var head = jade.compileFile(systemPathDetail[template]["path"])
				}
				if(systemPathDetail[template]["type"] == "page"){
					var body = jade.compileFile(systemPathDetail[template]["path"])
				}
			}
		}
		var head = head();
		var body = body();

		var compile = function(){
			return "<html lang='FROM DB'>"+head+body+"</html>"
		}

		app.get("/", function(req,res){
			res.render("index.jade",{saphire:{
				render:saphire.render,
				compile:compile()
			}
			});
		});
	}

}

module.exports = saphire
