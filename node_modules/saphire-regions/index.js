var parseRegions = require('./actions/regions.js'),
		fs = require("fs"),
		saphireData = require("saphire").data

var exportable = [];

var setTheme = saphireData.activeThemes[0].app,
		entryPoint = saphireData.activeThemes[2].entry


//this is a bit of a loop really it returns back to source :/
var saphireRegions = {

	use: function(publicPath, app) {
		this.app = app;
		this.path = publicPath // add to this object scope
		return this.deployTheme() //run the next function
	},
	deployTheme:function(){

		var getTheme = setTheme.toLowerCase()

		//make the theme structure and info file
		var themesDir = this.path+"themes";

		//if themes isnt deployed make it
		if (!fs.existsSync(themesDir)) {
			fs.mkdirSync(themesDir);
			fs.mkdirSync(themesDir+"/"+getTheme);
			fs.writeFile(themesDir+"/"+getTheme+"/" + getTheme+entryPoint, "//foo")
		}

		var themeList = fs.readdirSync(themesDir)

		//recognise theme if has entry point file as specified at the top
		var allowedThemes = []

		for(theme in themeList){
			var lookEntryPoint = fs.readdirSync(themesDir+"/"+themeList[theme]).toString()
			var currentDir = themesDir+"/"+themeList[theme];
			if(/.info.js/g.test(lookEntryPoint)){
				allowedThemes.push(themesDir+"/"+themeList[theme])
			}
		}
		//TO DO PUSH ALLOWED THEMES TO DB

		var currentTheme = themesDir+"/"+getTheme;
		this["theme"] = currentTheme;

		//get active theme and check if has info file based on the already allowed themes, if not throw err
		if(allowedThemes.indexOf(currentTheme)){
			//acitve this is not broken
			var availableRegions = parseRegions(themesDir+"/"+getTheme+"/"+getTheme+entryPoint);
			this.regionData = availableRegions;
		}
		else{
			console.log("no .info.js file found in "+getTheme)
		}
		// start sending the render function back up the function chain to the main module.
	},

	render:function(str){
		var region = this["regionData"][str];
		return "<"+region['wrapper']+" class='"+region['class']+"' "+region['dataFormatted']+">"+region['blocks']+"</"+region['wrapper']+">"
	}
	//end saphire obj
}

module.exports = saphireRegions

